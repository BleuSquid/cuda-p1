# You can use this file to customize CUDAPm1 without having to create a long
# and complex command. You can set most of the command line options here;
# however, if you do use command line options, they will override their
# corresponding value in this file.

# CheckpointIterations is the same as the -c option; it determines how often
# checkpoints are written and also how often CUDAPm1 prints to terminal.
CheckpointIterations=5000

# This sets the name of the work file used by CUDAPm1.
WorkFile=worktodo.txt

# This sets the name of the results file used by CUDAPm1.
ResultsFile=results.txt

# Polite is the same as the -polite option. If it's 1, each iteration is
# polite. If it's (for example) 12, then every 12th iteration is polite. Thus
# the higher the number, the less polite the program is. Set to 0 to turn off
# completely. Polite!=0 will incur a slight performance drop, but the screen
# should be more responsive. Trade responsiveness for performance. (Note:
# polite=1 is known to cause CUDAPm1 to use some extra CPU time; Polite=64 or
# higher is a good compromise.)
Polite=0

# CheckRoundoffAllIterations is the same as the -t option. When active, each
# iteration's roundoff error is checked, at the price of a small performance
# cost. I'm not sure how often it's checked otherwise. This is a binary option;
# set to 1 to activate, 0 to de-activate.
CheckRoundoffAllIterations=0

# SaveAllCheckpoints is the same as the -s option. When active, CUDAPm1 will
# save each checkpoint separately in the folder specified in the "SaveFolder"
# option below. This is a binary option; set to 1 to activate, 0 to de-activate.
SaveAllCheckpoints=0

KeepStage1SaveFile=1

# This option is the name of the folder where the separate checkpoint files are
# saved. This option is only checked if SaveAllCheckpoints is activated.
SaveFolder=savefiles

# Interactive is the same as the -k option. When active, you can press p, t, or
# s to change the respective options while the program is running. P is polite,
# t is CheckRoundoffAllIterations, and s is the SaveAllCheckpoints feature
# above. This is a binary option; set to 1 to activate, 0 to de-activate.
Interactive=0

# Threads is the same as the -threads option. This sets the number of threads
# used in the FFTs. This must be 32, 64, 128, 256, 512, or 1024. (Some FFT
# lengths have a higher minimum than 32.) Default is 256.
Threads=256

# DeviceNumber is the same as the -d option. Use this to run CUDAPm1 on a GPU
# other than "the first one". Only useful if you have more than one GPU.
# "First" is 0, "second" 1, etc.
DeviceNumber=0

# PrintDeviceInfo is the same as the -info option. This sets whether or not
# CUDAPm1 prints information about your GPU. This is a binary option; set to
# 1 to activate, 0 to de-activate.
PrintDeviceInfo=1

# FFTLength is the same as the -f option. If this is 0, CUDAPm1 will
# autoselect a length for each exponent. Otherwise, you can set this with an
# override length; this length will be used for all exponents in worktodo.txt,
# which may not be optimal (or even possible).
#
# Users should be aware however that you can now specify the FFT length on a
# per-exponent basis via the work file; to use (e.g.) a 1440K length for a test,
# the line should look like "Test=<assignment key>,<exponent>,1440K". Note
# that there can be no space between the number (1440) and the K. You must have
# a K or M (e.g. ",<exponent>,3M" for a 3M length) for the program to recognize
# the field as an FFT length.  This newer work file feature should render this
# ini option obsolete (which should thus be kept at 0).
#
# To see a list of reasonable FFT lengths, try running (e.g.)
# "$ CUDAPm1 -cufftbench 32768 3276800 32768" which will test a large range.
# In general, the length should be divisible by 1024, as well as 7-smooth (or
# 5- or 3-smooth for even better performance). ("Smooth" means that a number's
# factors are ALL less than the smoothness bound. 15 = 3*5 is 5-smooth, whereas
# 132 = 2^2*3*11 is 11-smooth but not 5- or 7-smooth.)
FFTLength=0

# UnusedMem sets how much unused memory is left free in the gpu's vram.
# Default is 100. Units are MB and implied.
# If the directive is absent from the ini file, a warning is issued.
# (reference: http://www.mersenneforum.org/showthread.php?t=17835&page=33 #356)
UnusedMem=100
